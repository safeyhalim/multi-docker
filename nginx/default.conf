# Configuration file for the nginx server
upstream client {
    server client:3000; # the server host is called client (which is the client's service name in the docker-compose file). The client app listens to port 3000
}

upstream api {
    server api:5000; # the server host is called api (which is the api's service name in the docker-compose file). The api service (the server app - check the server folder) listens to port 5000
}

server {
    listen 80;

    location / { # routing / to the client app
        proxy_pass http://client; # route to the client upstream as defined above
    }

    # The is development-specific configuration and not necessarily needed for production. It allow the websocket connection from the React app to be proxied to the backend (This connection is made so that the React app notices any changes to the source code and is automatically re-loaded)
    # This block will route the websocket connection to the client service (the React App) via nginx.
    # The upgrade header is used by Websocket to establish a connection with an HTTP server
    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /api {
        rewrite /api/(.*) /$1 break; # regex that strips the /api part from the url because the server app (the api) doesn't expect /api as a prefix to its urls
        proxy_pass http://api; # route to the api upstream as define above
    }
}